# Exercise: Implement a Simple Memory Allocator

**Objective:** Create a custom memory allocator that manages a fixed-size memory block (heap) in C, mimicking the behavior of `malloc` and `free`.

## Requirements

1. **Fixed Heap:**
   - Define a fixed-size memory block to act as your heap.
     ```c
     #define HEAP_SIZE 1024 * 1024  // 1 MB
     static char heap[HEAP_SIZE];   // Fixed-size memory block
     ```

2. **Allocator Functions:**
   - `void* mymalloc(size_t size);`
     - Allocates memory from the fixed heap.
     - Returns a pointer to a block of the requested size.
   - `void myfree(void* ptr);`
     - Frees previously allocated memory.
     - Makes the memory available for future allocations.

3. **Initialization:**
   - No need for special initialization of the heap unless your implementation requires it.

4. **Usage Example:**
   ```c
   int main() {
       // Allocate memory
       void* ptr = mymalloc(100);

       // Use the allocated memory
       // ...

       // Free the memory
       myfree(ptr);

       return 0;
   }

