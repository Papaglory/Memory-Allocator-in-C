# Linked List with Downward-Growing Metadata

## Concept
- **Metadata Area**: Grows downwards from the top of the memory block.
- **User Memory Area**: Grows upwards from the bottom of the memory block.
- **Linked List**: Used to track used and free memory blocks dynamically.

## Linked List Structure
- **Node**: Represents a memory segment with:
  - **Start Address**
  - **Size**
  - **Status** (Free/Allocated)
  - **Pointers** (Previous/Next)

## Operations
- **Allocation**:
  - Traverse the list to find a free block.
  - Allocate memory, update node status, and adjust the list.
  - Split blocks if needed and update the list.
- **Deallocation**:
  - Mark the block as free.
  - Merge with adjacent free blocks if possible.
  - Update the list to reflect changes.

## Advantages
- **Dynamic Management**: Flexibly manages varying block sizes.
- **Fragmentation Handling**: Allows for merging of adjacent free blocks.
- **Efficient**: Supports easy insertion, deletion, and traversal of nodes.

## Considerations
- **Boundary Management**: Keep track of the boundary between metadata and user memory.
- **Thread Safety**: Ensure synchronization in multi-threaded environments.
- **Testing**: Test for performance and handle fragmentation effectively.

